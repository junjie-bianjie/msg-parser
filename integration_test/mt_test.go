package integration

import (
	"encoding/hex"
	"fmt"
	"github.com/kaifei-bianjie/msg-parser/codec"
	. "github.com/kaifei-bianjie/msg-parser/codec"
	"github.com/kaifei-bianjie/msg-parser/utils"
)

func (s IntegrationTestSuite) TestMT() {
	cases := []SubTest{
		{
			"MTIssueDenom",
			MTIssueDenom,
		},
		{
			"MTTransferDenom",
			MTTransferDenom,
		},
		{
			"MintMT",
			MintMT,
		},
		{
			"EditMT",
			EditMT,
		},
		{
			"TransferMT",
			TransferMT,
		},
		{
			"BurnMT",
			BurnMT,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func MTIssueDenom(s IntegrationTestSuite) {
	codec.SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString("0A730A710A192F697269736D6F642E6D742E4D7367497373756544656E6F6D12540A12746573745F69737375735F64656E6F6D5F33121269737375655F64656E6F6D5F646174615F331A2A6961613130366C6367356D38683363646177756E376332727277706A3771336E636672396B337778777812610A4A0A400A192F636F736D6F732E63727970746F2E736D322E5075624B657912230A210203B02935779B12EDDB7C6C84E17D6BEE2D44DAEA9E446448000EF99C7977B08912040A020801181E12130A0D0A06756972697461120332303010C09A0C1A40BACCE68539E9FC104BA915D9433CA9AD99DB93A244C4CEBFB158875031BDAEFD367E90F53E1C9055B8F3CE5CE188D8D9361B5534B584D54C0BEF1C6D9ADF1A6C")
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Mt.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func MTTransferDenom(s IntegrationTestSuite) {
	codec.SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Mt.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func MintMT(s IntegrationTestSuite) {
	codec.SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Mt.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func EditMT(s IntegrationTestSuite) {
	codec.SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString("0ADE010ADB010A152F697269736D6F642E6D742E4D7367456469744D5412C1010A40646331643166356135346366646334656435623963613930616430396635623862396266613362373861393462363463653531643464373763366332313266331240613730373832613635656431303061373631613933336530613031656337333932323832356265323766386630333037366132656437623164623062636164371A0F6D745F656469745F646174615F3031222A6961613130366C6367356D38683363646177756E376332727277706A3771336E636672396B337778777812610A4A0A400A192F636F736D6F732E63727970746F2E736D322E5075624B657912230A210203B02935779B12EDDB7C6C84E17D6BEE2D44DAEA9E446448000EF99C7977B08912040A020801182812130A0D0A06756972697461120332303010C09A0C1A40106FDDD6EF5CFEF3D56F03511CDFE884F05AEF19C55D68725012C06B450D23DA4AA4854A6147F0B0E66F865CDF0F43B992631C44664E10E0CDF2EB22F9532ABE")
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Mt.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TransferMT(s IntegrationTestSuite) {
	codec.SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Mt.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func BurnMT(s IntegrationTestSuite) {
	codec.SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := codec.GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Mt.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}
