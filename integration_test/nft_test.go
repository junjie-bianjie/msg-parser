package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/kaifei-bianjie/msg-parser/codec"
	"github.com/kaifei-bianjie/msg-parser/utils"
)

func (s IntegrationTestSuite) TestNft() {
	cases := []SubTest{
		{
			"IssueDenom",
			IssueDenom,
		},
		{
			"TransferDenom",
			TransferDenom,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func IssueDenom(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0abd090aba090a1a2f697269736d6f642e6e66742e4d7367497373756544656e6f6d129b090a07626f6e6466786c1adf087b2224736368656d61223a22687474703a2f2f6a736f6e2d736368656d612e6f72672f64726166742d30372f736368656d6123222c22246964223a22687474703a2f2f6578616d706c652e636f6d2f6e66742e736368656d612e6a736f6e222c2274797065223a226f626a656374222c2270726f70657274696573223a7b2276697369626c65223a7b2274797065223a22626f6f6c65616e227d2c227265706f7274223a7b2274797065223a226f626a656374222c2270726f70657274696573223a7b22686561646572223a7b2274797065223a226172726179222c226974656d73223a7b2274797065223a22737472696e67222c22756e697175654974656d73223a747275652c22656e756d223a5b22e58faae695b0222c22e98791e9a29d222c22e5b882e59cba222c22e580bae588b8e59381e7a78d222c22e69c9fe99990222c22e58f91e8a18ce4baba222c22e8af84e7baa7222c22e68a95e8b584e88085225d2c226d696e4974656d73223a317d7d2c2264617461223a7b2274797065223a226172726179222c226974656d73223a7b2274797065223a226172726179222c226974656d73223a7b2274797065223a22737472696e67227d2c226d696e4974656d73223a317d7d2c2266697865645f76616c75655f686561646572223a7b2274797065223a226172726179222c226974656d73223a7b2224726566223a22232f646566696e6974696f6e732f66697865645f76616c75655f686561646572227d7d2c2264617465223a7b2224726566223a22232f646566696e6974696f6e732f64617465227d2c22736f75726365223a7b2274797065223a226172726179222c226974656d73223a7b2274797065223a22737472696e67227d7d7d2c227265717569726564223a5b22686561646572222c2264617461222c2264617465225d7d7d2c227265717569726564223a5b2276697369626c65222c227265706f7274225d2c22646566696e6974696f6e73223a7b2264617465223a7b2274797065223a226f626a656374222c2270726f70657274696573223a7b227374617274223a7b2274797065223a22737472696e67222c227061747465726e223a225e5b302d395d7b347d2d5b302d395d7b327d2d5b302d395d7b327d24227d2c22656e64223a7b2274797065223a22737472696e67222c227061747465726e223a225e5b302d395d7b347d2d5b302d395d7b327d2d5b302d395d7b327d24227d2c2274797065223a7b2274797065223a22737472696e67222c22656e756d223a5b2244222c2257222c224d222c2259225d7d7d2c227265717569726564223a5b227374617274222c22656e64222c2274797065225d7d2c2266697865645f76616c75655f686561646572223a7b2274797065223a226f626a656374222c2270726f70657274696573223a7b22686561646572223a7b2274797065223a22737472696e67227d2c2276616c7565223a7b2274797065223a22737472696e67227d7d2c227265717569726564223a5b22686561646572222c2276616c7565225d7d7d7d222a69616131737278306c707535346b766372353774683476687a6b76393276336b6d6b36373072377674323001380112640a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a210384228c1b55c6af8d4299e5be90d4a0b539b4cbeeffb67145e6a15d08eb65ba7d12040a020801180812100a0a0a057374616b6512013210c09a0c1a40e7ef51552b6ad3a9525bfcad7bebd08331a02ba15e1bccc63d50cad1ae099edd6a2e917aa4d15f72ab6ef36606effe77aa2dcac5c31b9146f6c866969677883a")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func TransferDenom(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0a85010a82010a1d2f697269736d6f642e6e66742e4d73675472616e7366657244656e6f6d12610a07626f6e6466786c122a69616131737278306c707535346b766372353774683476687a6b76393276336b6d6b36373072377674321a2a69616131737278306c707535346b766372353774683476687a6b76393276336b6d6b363730723776743212640a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a210384228c1b55c6af8d4299e5be90d4a0b539b4cbeeffb67145e6a15d08eb65ba7d12040a020801180912100a0a0a057374616b6512013210c09a0c1a40ccf317d9e0d94cf70e78199b875f8171cf9c5d31ec754182e7931543110c2d286f3fb2f27f263061033727ab298339d658423f73b9eb220c62e985417cc986e0")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}
